# saveDB : Forjson.html으로부터 받은 인증키와 페이지 수를 받은 다음, 인증키와 페이지 수를 통해 얻은 데이터 셋을 매핑하고 MySQL DB에 저장하는 함수.
def saveDB(request):
    page_num = request.POST["checked_page_num"]          
    service_key = request.POST["hidden_service_key"]
    data_name = request.POST["data_name"]
    # Forjson.html에서 name이 checked_page_num인 input value 값을 page_num에 저장 >> 지정된 페이지 수
    # Forjson.html에서 name이 hidden_service_key인 input value 값을 service_key 저장 >> 지정된 인증키
    # Forjson.html에서 name이 data_name input value 값을 data_name 저장 >> 지정된 데이터셋 이름


    enter_data = page_num + " 페이지를 DB에 저장하는데 성공했습니다!!"
    page_num1 = 'page='+page_num
    service_key1 = service_key.replace('page=1', page_num1)
    # enter_data >> 지정된 페이지에 있는 데이터셋을 DB에 저장성공 했으면, Forjson.html에 띄워 줄 문구를 저장
    # 예를 들어, page_num에 값이 2가 있으면, page_num1에 "page="+"2" = "page=2"를 대입
    # 변수 service_key의 값에서 'page=1'을 page_num1에 저장된 값으로 변경하고, 변경된 문자열을 service_key1에 저장.


    if data_name == "전문자료": # DB에 저장할 데이터셋이 전문자료에 해당되면,
        mapping_list = {'title':{'전문자료 메인 제목':'org'},'subjects':{'주제1':'org1','주제2':'org2','주제3':'org3','전문자료 문서 타입':'org4'},'description':{'전문자료 문서 목차':'toc','전문자료 문서 새요약':'summary'},'publisher':{'전문자료 부서 코드':'org'},'contributors':{'전문자료 문서 저자':'author','전문자료 등록자':'donator'},'date':{'전문자료 등록 일자':'registered','전문자료 승인 일자':'available'},'language':{"org":"ko"},'identifier':{'전문자료 문서 아이디':'site'}}
        df = pd.read_json(service_key1)['data']
        # 매핑 리스트 지정 및 지정된 페이지의 전문자료 데이터셋을 가져옴. 

    elif data_name == "현행법령": # DB에 저장할 데이터셋이 현행법령에 해당되면,
        mapping_list = {"type":{"org":"{T007:법령}"},"title":{"법령명한글":"org"},"subjects":{"법령약칭명":"org"},"publisher":{"소관부처명":"org"},"date":{"공포일자":"issued","시행일자":"available"},"language":{"org":"ko"},"identifier":{"법령일련번호":"site","법령상세링크":"url"},"relation":{"제개정구분명":"isPartOF"}}
        data = req.get(service_key1)
        xmlObject = xmltodict.parse(data.content)
        unrefined_df = xmlObject['LawSearch']['law']
        df = []
        for i in range(len(unrefined_df)):
            del(unrefined_df[i]["@id"])
            df.append(unrefined_df[i])

    elif data_name == '행정규칙': # DB에 저장할 데이터셋이 행정규칙에 해당되면,
        mapping_list = {"type":{"org":"{T007:법령}"},"title":{"행정규칙명":"org"},"publisher":{"소관부처명":"org"},"date":{"발령일자":"issued","시행일자":"available"},"identifier":{"행정규칙ID":"site","행정규칙상세링크":"url"},"relation":{"제개정구분명":"isPartOF"}}
        data = req.get(service_key1)
        xmlObject = xmltodict.parse(data.content)
        unrefined_df = xmlObject['AdmRulSearch']['admrul']
        df = []
        for i in range(len(unrefined_df)):
            del(unrefined_df[i]["@id"])
            df.append(unrefined_df[i])

    df_len =  len(df)
    df_len_list = [i+1 for i in range(df_len)]


    key_list = list(df[0].keys())
    first_key = key_list[0]
    last_key = key_list[len(key_list)-1]
    Values_list = []
    for i in range(df_len):
        Values_list.append(df[i])

    
    modified_list = []
    for k in range(df_len):
        new_dict = {}
        for i, j in mapping_list.items():
            added_dict ={}
            if i == "type":
                new_dict[i] = j
            elif i != 'language':
                for key,value in j.items():
                    added_dict[value] = df[k][key]
                new_dict[i]=added_dict
            else:
                for key,value in j.items():
                    added_dict[key] = value
                new_dict[i] = added_dict
        modified_list.append(new_dict)
    

    
    conn = pms.connect(host = '127.0.0.1',user = 'root', password = '1234', db = 'link', charset = 'utf8mb4')
    # pms모듈의 connect메서드를 통해, Mysql의 지정된 user//password에 존재하는 "link" DB을 파이썬과 연결하는 객체를 생성 후, 객체를 conn 변수에 저장.

    cur = conn.cursor()  
    # 변수 conn에 저장된 객체의 cursor 메서드를 통해, sql문을 실행하고 실행된 결과를 돌려받는 객체를 생성 후, 객체를 cur 변수에 저장.   

    key_list = list(modified_list[0].keys())
    # 매핑화된 데이터셋의 컬럼명들을 key_list에 저장함.


    if data_name == "전문자료":
        table_name = "if_dk_item_전문자료 (META_TITLE, META_SUBJECT, META_DESC, META_PUBLISHER, META_CONTRIBUTOR, META_DATE, META_LANGUAGE, META_IDENTIFIER) values("
    elif data_name == "현행법령":
        table_name = "if_dk_item_현행법령 (META_TYPE, META_TITLE, META_SUBJECT, META_PUBLISHER, META_DATE, META_LANGUAGE, META_IDENTIFIER, META_RELATION) values("
    elif data_name == "행정규칙":
        table_name = "if_dk_item_행정규칙 (META_TYPE, META_TITLE, META_PUBLISHER, META_DATE, META_IDENTIFIER, META_RELATION) values("
   

    # 여기부터 매핑화된 데이터셋을 mysql db에 추가하는 sql문을 실행해주는 코드임. (단, sql문의 실행결과만 가지고 있을 뿐, 실제로 실행결과가 db에 저장되는 코드는 아님.)
    for i in modified_list:
        str1 = "INSERT INTO link." + table_name 
        
        for key, value in i.items():
            if key != key_list[len(key_list)-1]:
                added_str =  "'"+ str(value).replace("'","")+"'," 
                str1 = str1 + added_str
            else:
                added_str = "'"+str(value).replace("'","")+"'"  
                str1 = str1 + added_str

        str1 = str1 + ")"

        cur.execute(str1)
        # str1에 저장된 sql문을 실행 후, 실행된 결과를 저장하고 있음.
        # 하지만 이는 실행 결과만 가지고 있을 뿐, 실제로 실행 결과가 db에 적용되는 것은 아님.

    # 여기까지 매핑화된 데이터셋을 mysql db에 추가하는 sql문을 실행해주는 코드임.

    conn.commit()
    # conn의 commit 메서드를 통해, cur에 저장되어 있는 sql문 실행결과들을 mysql db에 적용.

    conn.close()
    # 저장하고자 하는 데이터셋을 mysql DB에 모두 저장하였으므로, conn의 close 메서드를 통해서 DB와의 연결을 해제함. 

    

    Values_zip = zip(df_len_list, Values_list)
    concat_zip = zip(df_len_list, modified_list)
    # Values_zip >> 원본 데이터 셋과 "df_len_list = [1, 2, ..., 행의 갯수]"를 가지는 zip 형식의 iterator를 가짐.
    # concat_zip >> 매핑된 데이터 셋과 "df_len_list = [1, 2, ..., 행의 갯수]"를 가지는 zip 형식의 iterator를 가짐.

    return render(request,'polls/Forjson.html',{"data_name":data_name,"enter_data":enter_data,"service_key":service_key,"df_len":df_len,"key_list":key_list,"Values_list":Values_list,"Values_zip":Values_zip,"first_key":first_key,"last_key":last_key,"page_num":page_num,"mapping_list":mapping_list,"concat_zip":concat_zip})
    # 원본 데이터셋 이름( 전문자료, 현행법령 등) // 인증키 // db저장 성공 메시지 // 원본 데이터 셋 // 매핑된 데이터 셋 등의 정보를 Forjson.html에 전달해줌.
# saveDB : Forjson.html으로부터 받은 인증키와 페이지 수를 받은 다음, 인증키와 페이지 수를 통해 얻은 데이터 셋을 매핑하고 MySQL DB에 저장하는 함수.
def saveDB(request):
    page_num = request.POST["checked_page_num"]          
    service_key = request.POST["hidden_service_key"]
    data_name = request.POST["data_name"]
    # Forjson.html에서 name이 checked_page_num인 input value 값을 page_num에 저장 >> 지정된 페이지 수
    # Forjson.html에서 name이 hidden_service_key인 input value 값을 service_key 저장 >> 지정된 인증키
    # Forjson.html에서 name이 data_name input value 값을 data_name 저장 >> 지정된 데이터셋 이름


    enter_data = page_num + " 페이지를 DB에 저장하는데 성공했습니다!!"
    page_num1 = 'page='+page_num
    service_key1 = service_key.replace('page=1', page_num1)
    # enter_data >> 지정된 페이지에 있는 데이터셋을 DB에 저장성공 했으면, Forjson.html에 띄워 줄 문구를 저장
    # 예를 들어, page_num에 값이 2가 있으면, page_num1에 "page="+"2" = "page=2"를 대입
    # 변수 service_key의 값에서 'page=1'을 page_num1에 저장된 값으로 변경하고, 변경된 문자열을 service_key1에 저장.


    if data_name == "전문자료": # DB에 저장할 데이터셋이 전문자료에 해당되면,
        mapping_list = {'title':{'전문자료 메인 제목':'org'},'subjects':{'주제1':'org1','주제2':'org2','주제3':'org3','전문자료 문서 타입':'org4'},'description':{'전문자료 문서 목차':'toc','전문자료 문서 새요약':'summary'},'publisher':{'전문자료 부서 코드':'org'},'contributors':{'전문자료 문서 저자':'author','전문자료 등록자':'donator'},'date':{'전문자료 등록 일자':'registered','전문자료 승인 일자':'available'},'language':{"org":"ko"},'identifier':{'전문자료 문서 아이디':'site'}}
        df = pd.read_json(service_key1)['data']
        # 매핑 리스트 지정 및 지정된 페이지의 전문자료 데이터셋을 가져옴. 

    elif data_name == "현행법령": # DB에 저장할 데이터셋이 현행법령에 해당되면,
        mapping_list = {"type":{"org":"{T007:법령}"},"title":{"법령명한글":"org"},"subjects":{"법령약칭명":"org"},"publisher":{"소관부처명":"org"},"date":{"공포일자":"issued","시행일자":"available"},"language":{"org":"ko"},"identifier":{"법령일련번호":"site","법령상세링크":"url"},"relation":{"제개정구분명":"isPartOF"}}
        data = req.get(service_key1)
        xmlObject = xmltodict.parse(data.content)
        unrefined_df = xmlObject['LawSearch']['law']
        df = []
        for i in range(len(unrefined_df)):
            del(unrefined_df[i]["@id"])
            df.append(unrefined_df[i])

    elif data_name == '행정규칙': # DB에 저장할 데이터셋이 행정규칙에 해당되면,
        mapping_list = {"type":{"org":"{T007:법령}"},"title":{"행정규칙명":"org"},"publisher":{"소관부처명":"org"},"date":{"발령일자":"issued","시행일자":"available"},"identifier":{"행정규칙ID":"site","행정규칙상세링크":"url"},"relation":{"제개정구분명":"isPartOF"}}
        data = req.get(service_key1)
        xmlObject = xmltodict.parse(data.content)
        unrefined_df = xmlObject['AdmRulSearch']['admrul']
        df = []
        for i in range(len(unrefined_df)):
            del(unrefined_df[i]["@id"])
            df.append(unrefined_df[i])

    df_len =  len(df)
    df_len_list = [i+1 for i in range(df_len)]


    key_list = list(df[0].keys())
    first_key = key_list[0]
    last_key = key_list[len(key_list)-1]
    Values_list = []
    for i in range(df_len):
        Values_list.append(df[i])

    
    modified_list = []
    for k in range(df_len):
        new_dict = {}
        for i, j in mapping_list.items():
            added_dict ={}
            if i == "type":
                new_dict[i] = j
            elif i != 'language':
                for key,value in j.items():
                    added_dict[value] = df[k][key]
                new_dict[i]=added_dict
            else:
                for key,value in j.items():
                    added_dict[key] = value
                new_dict[i] = added_dict
        modified_list.append(new_dict)
    

    
    conn = pms.connect(host = '127.0.0.1',user = 'root', password = '1234', db = 'link', charset = 'utf8mb4')
    # pms모듈의 connect메서드를 통해, Mysql의 지정된 user//password에 존재하는 "link" DB을 파이썬과 연결하는 객체를 생성 후, 객체를 conn 변수에 저장.

    cur = conn.cursor()  
    # 변수 conn에 저장된 객체의 cursor 메서드를 통해, sql문을 실행하고 실행된 결과를 돌려받는 객체를 생성 후, 객체를 cur 변수에 저장.   

    key_list = list(modified_list[0].keys())
    # 매핑화된 데이터셋의 컬럼명들을 key_list에 저장함.


    if data_name == "전문자료":
        table_name = "if_dk_item_전문자료 (META_TITLE, META_SUBJECT, META_DESC, META_PUBLISHER, META_CONTRIBUTOR, META_DATE, META_LANGUAGE, META_IDENTIFIER) values("
    elif data_name == "현행법령":
        table_name = "if_dk_item_현행법령 (META_TYPE, META_TITLE, META_SUBJECT, META_PUBLISHER, META_DATE, META_LANGUAGE, META_IDENTIFIER, META_RELATION) values("
    elif data_name == "행정규칙":
        table_name = "if_dk_item_행정규칙 (META_TYPE, META_TITLE, META_PUBLISHER, META_DATE, META_IDENTIFIER, META_RELATION) values("
   

    # 여기부터 매핑화된 데이터셋을 mysql db에 추가하는 sql문을 실행해주는 코드임. (단, sql문의 실행결과만 가지고 있을 뿐, 실제로 실행결과가 db에 저장되는 코드는 아님.)
    for i in modified_list:
        str1 = "INSERT INTO link." + table_name 
        
        for key, value in i.items():
            if key != key_list[len(key_list)-1]:
                added_str =  "'"+ str(value).replace("'","")+"'," 
                str1 = str1 + added_str
            else:
                added_str = "'"+str(value).replace("'","")+"'"  
                str1 = str1 + added_str

        str1 = str1 + ")"

        cur.execute(str1)
        # str1에 저장된 sql문을 실행 후, 실행된 결과를 저장하고 있음.
        # 하지만 이는 실행 결과만 가지고 있을 뿐, 실제로 실행 결과가 db에 적용되는 것은 아님.

    # 여기까지 매핑화된 데이터셋을 mysql db에 추가하는 sql문을 실행해주는 코드임.

    conn.commit()
    # conn의 commit 메서드를 통해, cur에 저장되어 있는 sql문 실행결과들을 mysql db에 적용.

    conn.close()
    # 저장하고자 하는 데이터셋을 mysql DB에 모두 저장하였으므로, conn의 close 메서드를 통해서 DB와의 연결을 해제함. 

    

    Values_zip = zip(df_len_list, Values_list)
    concat_zip = zip(df_len_list, modified_list)
    # Values_zip >> 원본 데이터 셋과 "df_len_list = [1, 2, ..., 행의 갯수]"를 가지는 zip 형식의 iterator를 가짐.
    # concat_zip >> 매핑된 데이터 셋과 "df_len_list = [1, 2, ..., 행의 갯수]"를 가지는 zip 형식의 iterator를 가짐.

    return render(request,'polls/Forjson.html',{"data_name":data_name,"enter_data":enter_data,"service_key":service_key,"df_len":df_len,"key_list":key_list,"Values_list":Values_list,"Values_zip":Values_zip,"first_key":first_key,"last_key":last_key,"page_num":page_num,"mapping_list":mapping_list,"concat_zip":concat_zip})
    # 원본 데이터셋 이름( 전문자료, 현행법령 등) // 인증키 // db저장 성공 메시지 // 원본 데이터 셋 // 매핑된 데이터 셋 등의 정보를 Forjson.html에 전달해줌.
